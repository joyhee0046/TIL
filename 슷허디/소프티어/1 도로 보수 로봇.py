'''
H사에서 개발한 도로 보수 로봇은 일차원 직선 도로를 따라 이동하며 도로에 생긴 구멍들을 수리하는 임무를 맡았습니다.
이 도로에는 총 N개의 구멍이 생겼으며, 각 구멍의 위치는 음수가 아닌 정수로 주어집니다.
모든 구멍은 서로 겹치지 않으며, 로봇은 고정된 길이의 보수 패치를 사용하여 이 구멍들을 수리할 수 있습니다.
이 때, 보수 패치의 길이는 항상 정수입니다. 로봇의 목표는 보수 패치를 최대 K개 활용하여 모든 구멍을 최소 길이의 패치로 효율적으로 수리하는 것입니다.
예를 들어, 구멍이 위치 1,3,4에 있고, 보수 패치가 하나만 사용 가능하다면, 모든 구멍을 커버하기 위한 보수 패치의 최소 길이는 4가 됩니다.
만약 보수 패치를 두 개 사용할 수 있다면, 필요한 각 패치의 최소 길이는 2가 될 것입니다.
로봇이 모든 구멍을 효과적으로 수리하기 위해 필요한 보수 패치의 최소 길이를 계산하는 프로그램을 작성하세요.

1 <= N, K <= 100,000
0 <= 도로 구멍 위치 <= 10^9
파이썬 1초 1024MB
자바 2초 1024MB
'''

'''
입력
TC 3
3 1
1 3 4
3 2
1 3 4
7 3
1 3 6 7 8 9 10
출력
4
2
3
'''

import sys, math
# 주어진 입력 받기
N, K = map(int, input().split())
hollli = list(map(int, input().split()))

# 실제 도로 만들기
road = []
check = 0
for i in range(max(hollli)+1):
    if i == hollli[check]:
        road.append(i)
        check += 1
    else:
        road.append(0)
# print(road)

# 첫 구멍부터 마지막 구멍까지 모두 덮는다는 가정에서 패치길이
max_patch = math.ceil((max(hollli)-min(hollli)+1)/K)
print((max(hollli)-min(hollli)+1)//K)

# 구멍이 멀리에 있다는 가정하에 중간에 있는 땅을 지나칠 수 있는 함수 필요
